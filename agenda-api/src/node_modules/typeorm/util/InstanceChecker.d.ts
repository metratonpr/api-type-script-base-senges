import type { MongoEntityManager } from "typeorm/entity-manager/MongoEntityManager.js";
import type { SqljsEntityManager } from "typeorm/entity-manager/SqljsEntityManager.js";
import type { EntitySchema } from "typeorm/entity-schema/EntitySchema.js";
import type { FindOperator } from "typeorm/find-options/FindOperator.js";
import type { EqualOperator } from "typeorm/find-options/EqualOperator.js";
import type { Query } from "typeorm/driver/Query.js";
import type { RdbmsSchemaBuilder } from "typeorm/schema-builder/RdbmsSchemaBuilder.js";
import type { Subject } from "typeorm/persistence/Subject.js";
import type { SelectQueryBuilder } from "typeorm/query-builder/SelectQueryBuilder.js";
import type { UpdateQueryBuilder } from "typeorm/query-builder/UpdateQueryBuilder.js";
import type { DeleteQueryBuilder } from "typeorm/query-builder/DeleteQueryBuilder.js";
import type { SoftDeleteQueryBuilder } from "typeorm/query-builder/SoftDeleteQueryBuilder.js";
import type { InsertQueryBuilder } from "typeorm/query-builder/InsertQueryBuilder.js";
import type { RelationQueryBuilder } from "typeorm/query-builder/RelationQueryBuilder.js";
import type { Brackets } from "typeorm/query-builder/Brackets.js";
import type { Table } from "typeorm/schema-builder/table/Table.js";
import type { TableCheck } from "typeorm/schema-builder/table/TableCheck.js";
import type { TableColumn } from "typeorm/schema-builder/table/TableColumn.js";
import type { TableExclusion } from "typeorm/schema-builder/table/TableExclusion.js";
import type { TableForeignKey } from "typeorm/schema-builder/table/TableForeignKey.js";
import type { TableIndex } from "typeorm/schema-builder/table/TableIndex.js";
import type { TableUnique } from "typeorm/schema-builder/table/TableUnique.js";
import type { View } from "typeorm/schema-builder/view/View.js";
import type { NotBrackets } from "typeorm/query-builder/NotBrackets.js";
import type { EntityMetadata } from "typeorm/metadata/EntityMetadata.js";
import type { ColumnMetadata } from "typeorm/metadata/ColumnMetadata.js";
import type { MssqlParameter } from "typeorm/driver/sqlserver/MssqlParameter.js";
import { DataSource } from "typeorm/data-source/index.js";
import { BaseEntity } from "typeorm/repository/BaseEntity.js";
export declare class InstanceChecker {
    static isMssqlParameter(obj: unknown): obj is MssqlParameter;
    static isEntityMetadata(obj: unknown): obj is EntityMetadata;
    static isColumnMetadata(obj: unknown): obj is ColumnMetadata;
    static isSelectQueryBuilder(obj: unknown): obj is SelectQueryBuilder<any>;
    static isInsertQueryBuilder(obj: unknown): obj is InsertQueryBuilder<any>;
    static isDeleteQueryBuilder(obj: unknown): obj is DeleteQueryBuilder<any>;
    static isUpdateQueryBuilder(obj: unknown): obj is UpdateQueryBuilder<any>;
    static isSoftDeleteQueryBuilder(obj: unknown): obj is SoftDeleteQueryBuilder<any>;
    static isRelationQueryBuilder(obj: unknown): obj is RelationQueryBuilder<any>;
    static isBrackets(obj: unknown): obj is Brackets;
    static isNotBrackets(obj: unknown): obj is NotBrackets;
    static isSubject(obj: unknown): obj is Subject;
    static isRdbmsSchemaBuilder(obj: unknown): obj is RdbmsSchemaBuilder;
    static isMongoEntityManager(obj: unknown): obj is MongoEntityManager;
    static isSqljsEntityManager(obj: unknown): obj is SqljsEntityManager;
    static isEntitySchema(obj: unknown): obj is EntitySchema;
    static isBaseEntityConstructor(obj: unknown): obj is typeof BaseEntity;
    static isFindOperator(obj: unknown): obj is FindOperator<any>;
    static isEqualOperator(obj: unknown): obj is EqualOperator<any>;
    static isQuery(obj: unknown): obj is Query;
    static isTable(obj: unknown): obj is Table;
    static isTableCheck(obj: unknown): obj is TableCheck;
    static isTableColumn(obj: unknown): obj is TableColumn;
    static isTableExclusion(obj: unknown): obj is TableExclusion;
    static isTableForeignKey(obj: unknown): obj is TableForeignKey;
    static isTableIndex(obj: unknown): obj is TableIndex;
    static isTableUnique(obj: unknown): obj is TableUnique;
    static isView(obj: unknown): obj is View;
    static isDataSource(obj: unknown): obj is DataSource;
    private static check;
}
